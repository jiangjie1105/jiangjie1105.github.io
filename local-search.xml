<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构-复杂度分析（下）</title>
    <link href="/2020/01/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2020/01/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>今天学习 四个复杂度分析</p><a id="more"></a><h2 id="1-最好情况时间复杂度"><a href="#1-最好情况时间复杂度" class="headerlink" title="1.最好情况时间复杂度"></a>1.最好情况时间复杂度</h2><p>看下面的代码</p><pre><code>// n 表示数组 array 的长度int find(int[] array, int n, int x) { int i = 0; int pos = -1; for (; i &lt; n; ++i) { if (array[i] == x) pos = i; } return pos;}</code></pre><p>上面代码的主要功能是，在一个无序数组（array）中<br>，查找变量x出现的位置，如果没有找到，就返回-1，这段代码的时间复杂度是0（n）<br>最好情况复杂度就是<strong>在最理想的情况下执行这段代码的时间复杂度</strong><br>比如想要查找的变量x正好是数组的第一个元素，这时对应的复杂度就是最好情况时间复杂度。</p><h2 id="2-最坏情况时间复杂度"><a href="#2-最坏情况时间复杂度" class="headerlink" title="2.最坏情况时间复杂度"></a>2.最坏情况时间复杂度</h2><p>同理，在最糟糕的情况下 如果我想要查找的元素变量x，在数组中没有，则需要把整个数组遍历一遍，这种比较糟糕的情况下，对应的时间复杂度就是最坏时间复杂度。</p><h2 id="3-平均情况时间复杂度"><a href="#3-平均情况时间复杂度" class="headerlink" title="3.平均情况时间复杂度"></a>3.平均情况时间复杂度</h2><p>在一般的代码中 最好情况复杂度和最坏情况复杂度对应的都是比较极端的情况，并不常见，所以需要引入另一个概念，<strong>平均时间复杂度</strong></p><ul><li>举例<br>如上面的代码，<br>要查找的变量x在数组中的位置有n+1种情况，<strong>从0索引到n-1索引或者不在数组中</strong>，这种情况，查找需要遍历的元素个数累加起来，再除以<strong>n+1</strong> 就可以得到需要遍历的元素个数平均值，即<br><img src="https://github.com/jiangjie1105/img-hexo/blob/master/1.png?raw=true" srcset="/img/loading.gif" alt="iamge"></li></ul><p>这个值就是概率论中的加权平均值，也叫期望值，所以平均时间复杂度的全称应该叫<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong></p><h2 id="4-均摊时间复杂度"><a href="#4-均摊时间复杂度" class="headerlink" title="4.均摊时间复杂度"></a>4.均摊时间复杂度</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js数据类型</title>
    <link href="/2020/01/13/js%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/"/>
    <url>/2020/01/13/js%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-js原始数据类型"><a href="#1-js原始数据类型" class="headerlink" title="1.js原始数据类型"></a>1.js原始数据类型</h2><a id="more"></a><p>在js中 有七种原始数据类型 </p><ul><li>boolean</li><li>null</li><li>symbol</li><li>string</li><li>number</li><li>undefined</li><li>bigint</li></ul><h2 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h2><ul><li>对象object(包含普通对象-object 数组对象-array，正则对象-regexp，日期对象date，数学函数-math 函数对象-fuction)<h2 id="变量的存放"><a href="#变量的存放" class="headerlink" title="变量的存放"></a>变量的存放</h2></li></ul><ol><li>基本数据类型 保存在<strong>栈</strong>内存中，因为这些类型在内存中分别有固定的大小，通过按值来访问</li><li>引用数据类型 保存在<strong>堆</strong>内存中，因为这些值大小不固定，因此不能把他们放在栈内存中，但内存地址是有固定大小的，所以保存在堆内存中，在栈中存放的内存只是对该对象的访问地址，当查询引用类型的变量时 先从<strong>栈中读取内存地址然后再通过地址找到堆中的值</strong>对于这种 我们叫做按引用访问。</li></ol><p><img src="http://resource.muyiy.cn/image/2019-07-24-060214.png" alt="栈内存和堆内存"></p><p>下面看几个问题</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1."></a>问题1.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 20;</span><br><span class="line">var b &#x3D; a;</span><br><span class="line">b &#x3D; 30;</span><br><span class="line">&#x2F;&#x2F;a值为多少？？</span><br></pre></td></tr></table></figure><p>a，b都是基本数据类型 ，他们的值存在栈中，ab分别有自己的栈空间，所以修改了b 的值以后，a的值并不会发生变化</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &#123;&quot;name: 刘德华&quot;&#125;</span><br><span class="line">var b &#x3D; a;</span><br><span class="line">b.name &#x3D; &#123;&quot;张学友&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>a,b 此时都是引用数据类型栈内存中存放地址指向对内存中的对象，引用类型的复制会为新的变量自动分配一个新的值保存在变量对象中，但只是引用类型的一个地址指针而已，实际指向的是同一个对象 所以修改b.name的值后，相应的a.name也发生了改变<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &#123; name: &#39;前端开发&#39; &#125;</span><br><span class="line">var b &#x3D; a;</span><br><span class="line">a &#x3D; null;</span><br><span class="line">&#x2F;&#x2F;这时b值是多少</span><br></pre></td></tr></table></figure></li><li>首先null是基本数据类型，a = null 之后只是把a存储在栈内存中的地址改成了基本类型null，并不会影响堆内存中的对象，所以b的值不受影响。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-复杂度分析(上)</title>
    <link href="/2020/01/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2020/01/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>如下代码</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int cal (int n) &#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    int i &#x3D; 1;</span><br><span class="line">    int j &#x3D; 1;</span><br><span class="line">    for (;i &lt; &#x3D; n ; i++)&#123;</span><br><span class="line">        j &#x3D; 1;</span><br><span class="line">        for (; j&lt;&#x3D; n; ++j) &#123;</span><br><span class="line">            sum &#x3D; sum + i*j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码二三四行都需要一个unit_time 执行时间，五六行循环执行了n遍，需要2n×unit_time执行时间 第七八行执行了n²次 所以总时间等于(2n²＋2n＋3)*unit_time</p><h2 id="1-大o复杂度表示法"><a href="#1-大o复杂度表示法" class="headerlink" title="1.大o复杂度表示法"></a>1.大o复杂度表示法</h2><h3 id="读数据–运算–写数据"><a href="#读数据–运算–写数据" class="headerlink" title="读数据–运算–写数据"></a>读数据–运算–写数据</h3><p>从cpu角度来讲 每一行都执行着类似操作 大o时间复杂度实际上不是代码的具体执行时间 而是表示代码执行时间随数据规模增长的变化趋势 所以也叫 <strong>渐进时间复杂度</strong> 也称<strong>时间复杂度</strong></p><h2 id="2-时间复杂度分析"><a href="#2-时间复杂度分析" class="headerlink" title="2.时间复杂度分析"></a>2.时间复杂度分析</h2><ol><li><p>只关注时间复杂度次数最多的一段代码，分析一段代码的时间复杂度时，也只关注循环执行次数最多的那一段代码就行了。</p></li><li><p>总的时间复杂度就等于量级最大的那段代码的时间复杂度</p></li><li><p>乘法法则：嵌套的代码的复杂度等于嵌套内外代码的复杂度的乘积  如果 T1(n)=O(f(n))，T2(n)=O(g(n))；那么 <strong>T(n)=T1(n)<em>T2(n)=O(f(n))</em>O(g(n))=O(f(n)*g(n))</strong>.</p></li></ol><ul><li>非多项式量级</li></ul><ol><li>：O(2 ) 和 O(n!) </li></ol><p>当数据规模很大时这两者算法执行时间会急剧增加，求解问题时间会无限增长 所以很低效 。</p><ul><li>多项式量级</li></ul><ol><li>0（1）</li></ol><p>0（1）只是时间复杂度的一种表示方法，不是执行了一行代码所以 只要语句中不存在循环语句，递归语句，即使有成千上万行代码 时间复杂度都是0（1）.</p><ol start="2"><li><p>O(logn)、O(nlogn)<br>如下面这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1 ;</span><br><span class="line">while (i &lt;&#x3D; n) &#123;</span><br><span class="line">    i &#x3D; i * 2；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中实际上就是i的值开始时是1，之后每次循环都乘二 相当于2的x次方等于n ，所以时间复杂度为以2为底log n, <strong>因为对数之间可以互相转换 所以采用大0标记复杂度的时候 可以忽略系数，即 O(Cf(n)) = O(f(n))。</strong></p><ul><li>o（ologn）</li></ul><p>如果一段代码时间复杂度为O（logn）那么循环n次就是o（nlogn）</p><ol start="3"><li>o（m+n），o（m*n）</li></ol><p>代码的复杂度<strong>由两个数据规模</strong>来决定 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int cal(int m, int n) &#123;</span><br><span class="line">    int sum_1 &#x3D; 0; </span><br><span class="line">    int i &#x3D; 1; </span><br><span class="line">    for (; i &lt; m; ++i) &#123;</span><br><span class="line">    sum_1 &#x3D; sum_1 + i;  </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    int sum_2 &#x3D; 0; </span><br><span class="line">    int j &#x3D; 1;  </span><br><span class="line">    for (; j &lt; n; ++j) &#123;</span><br><span class="line">        sum_2 &#x3D; sum_2 + j;  </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  return sum_1 + sum_2; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中 m和n是两个数据规模 我们无法评估谁的量级大所以在表示 时间复杂度时就不能用加法准则，所以上面的代码时间复杂的就是0（m+n）<br>所以针对上面的情况，加法规则就不正确了，<br>需要改为<strong>T1(m)+T2(n)=o(f(m) + g(n))</strong> 乘法规则继续有效。</p></li></ol><ul><li>空间复杂度分析 </li></ul><p>空间复杂度的全称就是<strong>渐进空间复杂度表示算法的存储空间与数据规模之间的增长关系</strong>。</p><h2 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h2><p><strong>复杂度也叫渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，越高阶复杂度的算法，执行效率越低。从低阶到高阶的有：o(1),o(logn),o(n),o(nlogn),o(n²)</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/02/14/hello-world/"/>
    <url>/2019/02/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
